# -*- coding: utf-8 -*-
"""block time prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rnznqxoUEdMhtUP92xZ8q0JaUYw05gSe

## Import Libraries Part
"""

# Import Neccessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

"""## Prepeare Data & Define Null Values"""

# Upload the data
from google.colab import files
uploaded = files.upload()

# Load the data
import io
df = pd.read_excel(io.BytesIO(uploaded['Robust_Airline_Scheduling_[8].xlsx']))
df

df.head()

df.isnull()

df.isnull().sum()

df.isnull().sum() .sum()

df.dtypes

rowNumber,columnNumber=df.shape
print(f"There are total {rowNumber} rows and {columnNumber} columns in data frame.")

"""# Filling Null Values"""

# Filling Null Values to Previous Value

df2 = df.fillna(method = 'pad')
df2

df2.isnull().sum()

df.info()

# Convert time columns to hour, minute, seconds
df['Departure Time'] = df['Departure Time'].apply(lambda x: x.hour * 3600 + x.minute * 60 + x.second)
df['Flight Time'] = df['Flight Time'].apply(lambda x: x.hour * 3600 + x.minute * 60 + x.second)
df['Arrival Time'] = df['Arrival Time'].apply(lambda x: x.hour * 3600 + x.minute * 60 + x.second)

# Convert data types to int
df['Departure Time'] = df['Departure Time'].astype(int)
df['Flight Time'] = df['Flight Time'].astype(int)
df['Arrival Time'] = df['Arrival Time'].astype(int)

df.info()

df2.info()

print(df.columns)

print(df2.columns)

# Dummy sütunlarının öneklerini belirlemek için boş liste oluşturuldu
dummy_column_prefixes = ['Tail No_', 'Flight No_', 'Departure_', 'Arrival_', 'Departure Time_', 'Flight Time_', 'Arrival Time_']

# DataFrame sütunlarını incelendi ve dummy sütunları tanımlandı
dummy_columns = [col for col in df.columns if any(col.startswith(prefix) for prefix in dummy_column_prefixes)]

print(dummy_columns)

# Sütun adlarını özelleştirerek dummy değişkenler yazıldı
categorical_cols = ['Tail No', 'Flight No', 'Departure', 'Arrival', 'Departure Time', 'Flight Time', 'Arrival Time']
df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# Oluşturulan dummy sütunlarının sütun adları düzenlendi
new_column_names = []
for column in df2.columns:
    parts = column.split('_')
    if len(parts) > 1:
        new_column_names.append(parts[0])
    else:
        new_column_names.append(column)

df2.columns = new_column_names

df.isnull().sum()

"""## Encoding (bu kısım eksik)"""

df.iloc[0]

df.info()

df = df.fillna(method = 'pad')
df

df.head()

df.columns

"""# Data Visualization"""

# Datasetin ilgili sütunları
tail_no = ["N530AA", "N530AA", "N530AA", "N530AA","N459AA", "N459AA", "N459AA", "N459AA","N531AA", "N531AA", "N531AA", "N531AA","N531AA", "N4XGAA", "N4XGAA", "N4XGAA","N598AA", "N598AA", "N598AA", "N439AA","N439AA", "N439AA", "N439AA", "N475AA","N475AA", "N475AA", "N475AA", "N475AA","N3EEAA", "N3EEAA", "N3EEAA", "N3EEAA","N4YDAA", "N4YDAA", "N3ERAA", "N3ERAA","N3ERAA", "N3ERAA", "N5CLAA", "N5CLAA","N5CLAA", "N535AA", "N535AA", "N535AA","N535AA", "N3DMAA", "N3DMAA", "N3DMAA","N544AA", "N544AA", "N544AA", "N544AA","N544AA", "N3EBAA", "N3EBAA", "N3EBAA","N3EBAA", "N3EBAA", "N3ETAA", "N3ETAA","N3ETAA", "N3ETAA", "N3ETAA", "N3DYAA","N3DYAA", "N3DYAA", "N3DRAA", "N3DRAA","N3DRAA", "N5DXAA", "N5DXAA", "N5DXAA","N454AA", "N454AA", "N454AA", "N454AA","N4YMAA", "N4YMAA", "N4YMAA", "N4YMAA","N467AA", "N467AA", "N467AA", "N467AA","N536AA", "N536AA", "N536AA", "N536AA","N536AA", "N420AA", "N420AA", "N420AA","N420AA", "N546AA", "N546AA", "N546AA","N546AA", "N4WPAA", "N4WPAA", "N4WPAA","N4WPAA", "N4WPAA", "N5EBAA", "N5EBAA","N5EBAA", "N3DUAA", "N3DUAA", "N3DUAA","N3ELAA", "N3ELAA", "N3DTAA", "N3DTAA","N412AA", "N412AA"]
departure = ["ORD", "LGA", "ORD", "DFW", "ORD", "LGA", "ORD", "LGA", "ORD", "DFW", "ORD","AUS", "ORD", "ORD", "SAN", "ORD", "ORD", "SFO", "ORD", "ORD", "PHX", "ORD","LGA", "ORD", "STL", "ORD", "SAT", "ORD", "ORD", "BOS", "ORD", "SNA", "ORD","SFO", "ORD", "DCA", "ORD", "LAS", "ORD", "SNA", "ORD", "ORD", "RSW", "ORD","EWR", "ORD", "FLL", "ORD", "ORD", "MCI", "ORD", "DFW", "ORD", "ORD", "MSP","ORD", "SAN", "ORD", "ORD", "EWR", "ORD", "DCA", "ORD", "ORD", "LAX", "ORD","ORD", "LAS", "ORD", "ORD", "MIA", "ORD", "ORD", "ATL", "ORD", "MCO", "ORD","MSY", "ORD", "PHL", "ORD", "PBI", "ORD", "STL", "ORD", "DFW", "ORD", "STL","ORD", "ORD", "RDU", "ORD", "PHX", "ORD", "EWR", "ORD", "MCO", "ORD", "DFW","ORD", "STL", "ORD", "ORD", "EGE", "ORD", "ORD", "LAX", "ORD", "ORD", "SJU","ORD", "HDN", "ORD", "DFW"]
arrival = ["LGA", "ORD", "DFW", "ORD", "LGA", "ORD", "LGA", "ORD", "DFW", "ORD", "AUS","ORD", "LGA", "SAN", "ORD", "LGA", "SFO", "ORD", "TUS", "PHX", "ORD", "LGA","ORD", "STL", "ORD", "SAT", "ORD", "PHL", "BOS", "ORD", "SNA", "ORD", "SFO","ORD", "DCA", "ORD", "LAS", "ORD", "SNA", "ORD", "MIA", "RSW", "ORD", "EWR","ORD", "FLL", "ORD", "SJU", "MCI", "ORD", "DFW", "ORD", "DEN", "MSP", "ORD","SAN", "ORD", "BOS", "EWR", "ORD", "DCA", "ORD", "LAS", "LAX", "ORD", "BOS","LAS", "ORD", "DCA", "MIA", "ORD", "MIA", "ATL", "ORD", "MCO", "ORD", "MSY","ORD", "PHL", "ORD", "PBI", "ORD", "STL", "ORD", "DFW", "ORD", "STL", "ORD","SLC", "RDU", "ORD", "PHX", "ORD", "EWR", "ORD", "MCO", "ORD", "DFW", "ORD","STL", "ORD", "SAN", "EGE", "ORD", "SNA", "LAX", "ORD", "RDU", "SJU", "ORD","HDN", "ORD", "DFW", "ORD"]

# Uçakların kalktığı ve indiği lokasyonları bir çizgi grafiğiyle gösterme
plt.figure(figsize=(120, 25))
plt.plot(tail_no, departure, marker='o', label='Departure', color='green')
plt.plot(tail_no, arrival, marker='x', label='Arrival', color='red')
plt.xlabel('Tail No')
plt.ylabel('Whole Locations')
plt.title('Departure and Arrival Datas')
plt.legend()
plt.grid(True)
plt.show()

# Datasetin ilgili sütunları
departure_time = ["06:15", "09:25", "13:35", "17:00", "06:50", "10:00", "13:55", "17:15","06:45", "10:10", "13:25", "17:00", "20:40", "08:45", "14:00", "19:50","07:50", "13:30", "19:15", "07:10", "11:55", "16:25", "20:00", "06:20","08:35", "10:45", "14:30", "18:05", "06:35", "09:35", "13:45", "19:10","09:45", "15:45", "06:45", "09:15", "12:25", "17:20", "08:25", "14:00", "19:25", "06:45", "10:20", "14:55", "18:45", "07:25", "11:10", "15:25","06:25", "08:40", "11:15", "14:40", "17:50", "06:40", "09:00", "11:35","16:45", "21:50", "06:35", "09:30", "13:10", "15:45", "19:00", "08:50","14:30", "19:45", "08:30", "13:25", "18:00", "07:35", "11:55", "16:20","06:30", "09:15", "12:25", "15:50", "08:20", "11:30", "15:05", "18:00","09:20", "13:00", "17:15", "19:10", "07:45", "11:35", "14:50", "17:00","19:15", "06:50", "09:25", "12:35", "17:15", "08:00", "11:25", "15:00","18:25", "09:05", "12:35", "15:50", "18:00", "20:15", "08:10", "12:25","18:40", "07:00", "12:40", "17:45", "08:30", "14:25", "09:50", "13:40","17:15", "20:40"]
flight_time = ["02:14", "02:50", "02:35", "02:30", "02:15", "02:50", "02:20", "02:50", "02:35", "02:20","02:50", "02:45", "02:05", "04:30", "04:10", "02:15", "04:55", "04:25", "03:55", "04:00","03:30", "02:25", "02:35", "01:10", "01:15", "03:00", "02:40", "02:05", "02:10", "03:05","04:35", "03:50", "04:55", "04:25", "01:40", "02:10", "04:05", "03:40", "04:40", "04:00","03:00", "02:45", "03:05", "02:45", "02:45", "02:55", "03:15", "04:35", "01:30", "01:30","02:35", "02:20", "02:45", "01:30", "01:25", "04:20", "03:55", "02:05", "02:05", "02:40","01:45", "02:15", "04:10", "04:35", "04:15", "02:15", "04:05", "03:35", "01:45", "03:10","03:20", "03:05", "02:00", "02:15", "02:40", "03:05", "02:25", "02:30", "02:05", "02:35","02:55", "03:20", "01:10", "01:20", "02:40", "02:20", "01:05", "01:20", "03:40", "01:50","02:15", "03:55", "03:25", "02:20", "02:40", "02:40", "02:55", "02:35", "02:20", "01:10","01:20", "04:30", "02:55", "02:45", "04:30", "04:30", "04:05", "01:55", "04:50", "05:35","02:50", "02:50", "02:35", "02:10"]
arrival_time = ["08:29", "12:15", "16:10", "19:30", "09:05", "12:50", "16:15", "20:05", "09:20", "12:30","16:15", "19:45", "22:45", "13:15", "18:10", "22:05", "12:45", "17:55", "23:10", "11:10","15:25", "18:50", "22:35", "07:30", "09:50", "13:45", "17:10", "20:10", "08:45", "12:40","18:20", "23:00", "14:40", "20:10", "08:25", "11:25", "16:30", "21:00", "13:05", "18:00","22:25", "09:30", "13:25", "17:40", "21:30", "10:20", "14:25", "20:00", "07:55", "10:10","13:50", "17:00", "20:35", "08:10", "10:25", "15:55", "20:40", "23:55", "08:40", "12:10","14:55", "18:00", "23:10", "13:25", "18:45", "22:00", "12:35", "17:00", "19:45", "10:45","15:15", "19:25", "08:30", "11:30", "15:05", "18:55", "10:45", "14:00", "17:10", "20:35","12:15", "16:20", "18:25", "20:30", "10:25", "13:55", "15:55", "18:20", "22:55", "08:40","11:40", "16:30", "20:40", "10:20", "14:05", "17:40", "21:20", "11:40", "14:55", "17:00","19:20", "00:45", "11:05", "15:10", "23:10", "11:30", "16:45", "19:40", "13:20", "20:00","12:40", "16:30", "19:50", "22:50"]

# Calculating flight time from departure and arrival times
from datetime import datetime, timedelta
for departure, flight_duration in zip(departure_time, flight_time):
    departure_datetime = datetime.strptime(departure, "%H:%M")
    flight_duration_datetime = datetime.strptime(flight_duration, "%H:%M")
    arrival_datetime = departure_datetime + timedelta(minutes=flight_duration_datetime.minute, hours=flight_duration_datetime.hour)
    arrival_time.append(arrival_datetime.strftime("%H:%M"))

# Plotting
plt.figure(figsize=(28, 6))
plt.plot(arrival_time, label='Flight Time (minutes)', marker='o', linestyle='-', color='b')
plt.xlabel('Flights')
plt.ylabel('Time(min)')
plt.title('Block Time')
plt.xticks(rotation=50)
plt.legend()

plt.tight_layout()
plt.show()

# Datasetin ilgili sütunları
departure_time = ["06:15", "09:25", "13:35", "17:00", "06:50", "10:00", "13:55", "17:15","06:45", "10:10", "13:25", "17:00", "20:40", "08:45", "14:00", "19:50","07:50", "13:30", "19:15", "07:10", "11:55", "16:25", "20:00", "06:20","08:35", "10:45", "14:30", "18:05", "06:35", "09:35", "13:45", "19:10","09:45", "15:45", "06:45", "09:15", "12:25", "17:20", "08:25", "14:00", "19:25", "06:45", "10:20", "14:55", "18:45", "07:25", "11:10", "15:25","06:25", "08:40", "11:15", "14:40", "17:50", "06:40", "09:00", "11:35","16:45", "21:50", "06:35", "09:30", "13:10", "15:45", "19:00", "08:50","14:30", "19:45", "08:30", "13:25", "18:00", "07:35", "11:55", "16:20","06:30", "09:15", "12:25", "15:50", "08:20", "11:30", "15:05", "18:00","09:20", "13:00", "17:15", "19:10", "07:45", "11:35", "14:50", "17:00","19:15", "06:50", "09:25", "12:35", "17:15", "08:00", "11:25", "15:00","18:25", "09:05", "12:35", "15:50", "18:00", "20:15", "08:10", "12:25","18:40", "07:00", "12:40", "17:45", "08:30", "14:25", "09:50", "13:40","17:15", "20:40"]
flight_time = ["02:14", "02:50", "02:35", "02:30", "02:15", "02:50", "02:20", "02:50", "02:35", "02:20","02:50", "02:45", "02:05", "04:30", "04:10", "02:15", "04:55", "04:25", "03:55", "04:00","03:30", "02:25", "02:35", "01:10", "01:15", "03:00", "02:40", "02:05", "02:10", "03:05","04:35", "03:50", "04:55", "04:25", "01:40", "02:10", "04:05", "03:40", "04:40", "04:00","03:00", "02:45", "03:05", "02:45", "02:45", "02:55", "03:15", "04:35", "01:30", "01:30","02:35", "02:20", "02:45", "01:30", "01:25", "04:20", "03:55", "02:05", "02:05", "02:40","01:45", "02:15", "04:10", "04:35", "04:15", "02:15", "04:05", "03:35", "01:45", "03:10","03:20", "03:05", "02:00", "02:15", "02:40", "03:05", "02:25", "02:30", "02:05", "02:35","02:55", "03:20", "01:10", "01:20", "02:40", "02:20", "01:05", "01:20", "03:40", "01:50","02:15", "03:55", "03:25", "02:20", "02:40", "02:40", "02:55", "02:35", "02:20", "01:10","01:20", "04:30", "02:55", "02:45", "04:30", "04:30", "04:05", "01:55", "04:50", "05:35","02:50", "02:50", "02:35", "02:10"]
arrival_time = ["08:29", "12:15", "16:10", "19:30", "09:05", "12:50", "16:15", "20:05", "09:20", "12:30","16:15", "19:45", "22:45", "13:15", "18:10", "22:05", "12:45", "17:55", "23:10", "11:10","15:25", "18:50", "22:35", "07:30", "09:50", "13:45", "17:10", "20:10", "08:45", "12:40","18:20", "23:00", "14:40", "20:10", "08:25", "11:25", "16:30", "21:00", "13:05", "18:00","22:25", "09:30", "13:25", "17:40", "21:30", "10:20", "14:25", "20:00", "07:55", "10:10","13:50", "17:00", "20:35", "08:10", "10:25", "15:55", "20:40", "23:55", "08:40", "12:10","14:55", "18:00", "23:10", "13:25", "18:45", "22:00", "12:35", "17:00", "19:45", "10:45","15:15", "19:25", "08:30", "11:30", "15:05", "18:55", "10:45", "14:00", "17:10", "20:35","12:15", "16:20", "18:25", "20:30", "10:25", "13:55", "15:55", "18:20", "22:55", "08:40","11:40", "16:30", "20:40", "10:20", "14:05", "17:40", "21:20", "11:40", "14:55", "17:00","19:20", "00:45", "11:05", "15:10", "23:10", "11:30", "16:45", "19:40", "13:20", "20:00","12:40", "16:30", "19:50", "22:50"]

bins = [0, 6, 12, 18, 24]  # Timezone groups

# Calculating flight duration from departure and arrival times
from datetime import datetime, timedelta
for departure, flight_duration in zip(departure_time, flight_time):
    departure_datetime = datetime.strptime(departure, "%H:%M")
    flight_duration_datetime = datetime.strptime(flight_duration, "%H:%M")
    arrival_datetime = departure_datetime + timedelta(minutes=flight_duration_datetime.minute, hours=flight_duration_datetime.hour)
    arrival_time.append(arrival_datetime.strftime("%H:%M"))

# Histogram
plt.figure(figsize=(12, 6))
plt.hist([int(time.split(':')[0]) for time in arrival_time], bins=bins, color='orange', edgecolor='black')
plt.xlabel('Arrival Time (Hour)')
plt.ylabel('Flight Counts')
plt.title('Distribution of Arrival Time')
plt.xticks(bins)
plt.tight_layout()
plt.show()

"""# Correlation"""

data = {'Departure Time' :["06:15", "09:25", "13:35", "17:00", "06:50", "10:00", "13:55", "17:15","06:45", "10:10", "13:25", "17:00", "20:40", "08:45", "14:00", "19:50","07:50", "13:30", "19:15", "07:10", "11:55", "16:25", "20:00", "06:20","08:35", "10:45", "14:30", "18:05", "06:35", "09:35", "13:45", "19:10","09:45", "15:45", "06:45", "09:15", "12:25", "17:20", "08:25", "14:00", "19:25", "06:45", "10:20", "14:55", "18:45", "07:25", "11:10", "15:25","06:25", "08:40", "11:15", "14:40", "17:50", "06:40", "09:00", "11:35","16:45", "21:50", "06:35", "09:30", "13:10", "15:45", "19:00", "08:50","14:30", "19:45", "08:30", "13:25", "18:00", "07:35", "11:55", "16:20","06:30", "09:15", "12:25", "15:50", "08:20", "11:30", "15:05", "18:00","09:20", "13:00", "17:15", "19:10", "07:45", "11:35", "14:50", "17:00","19:15", "06:50", "09:25", "12:35", "17:15", "08:00", "11:25", "15:00","18:25", "09:05", "12:35", "15:50", "18:00", "20:15", "08:10", "12:25","18:40", "07:00", "12:40", "17:45", "08:30", "14:25", "09:50", "13:40","17:15", "20:40"], 'Flight Time' : ["02:14", "02:50", "02:35", "02:30", "02:15", "02:50", "02:20", "02:50", "02:35", "02:20","02:50", "02:45", "02:05", "04:30", "04:10", "02:15", "04:55", "04:25", "03:55", "04:00","03:30", "02:25", "02:35", "01:10", "01:15", "03:00", "02:40", "02:05", "02:10", "03:05","04:35", "03:50", "04:55", "04:25", "01:40", "02:10", "04:05", "03:40", "04:40", "04:00","03:00", "02:45", "03:05", "02:45", "02:45", "02:55", "03:15", "04:35", "01:30", "01:30","02:35", "02:20", "02:45", "01:30", "01:25", "04:20", "03:55", "02:05", "02:05", "02:40","01:45", "02:15", "04:10", "04:35", "04:15", "02:15", "04:05", "03:35", "01:45", "03:10","03:20", "03:05", "02:00", "02:15", "02:40", "03:05", "02:25", "02:30", "02:05", "02:35","02:55", "03:20", "01:10", "01:20", "02:40", "02:20", "01:05", "01:20", "03:40", "01:50","02:15", "03:55", "03:25", "02:20", "02:40", "02:40", "02:55", "02:35", "02:20", "01:10","01:20", "04:30", "02:55", "02:45", "04:30", "04:30", "04:05", "01:55", "04:50", "05:35","02:50", "02:50", "02:35", "02:10"]}
df2 = pd.DataFrame(data)

# Departure Time sütununu datetime veri türüne dönüştürün
df2['Departure Time'] = pd.to_datetime(df2['Departure Time'], format='%H:%M')

# Flight Time sütununu datetime veri türüne dönüştürün
df2['Flight Time'] = pd.to_datetime(df2['Flight Time'], format='%H:%M')

# Saat ve dakikayı ayırmak için işlevleri kullanın
def extract_hour(time):
    return time.hour

def extract_minute(time):
    return time.minute

# Departure Time sütununu işlevleri kullanarak işler
df2['Departure Hour'] = df2['Departure Time'].apply(extract_hour)
df2['Departure Minute'] = df2['Departure Time'].apply(extract_minute)

# Aynı şekilde Flight Time sütununu işler
df2['Flight Hour'] = df2['Flight Time'].apply(extract_hour)
df2['Flight Minute'] = df2['Flight Time'].apply(extract_minute)

# Heat map oluşturulur
plt.figure(figsize=(10, 8))
sns.heatmap(df2[['Departure Hour', 'Departure Minute', 'Flight Hour', 'Flight Minute']].corr(), cmap='YlGnBu', annot=True, fmt=".2f")
plt.xlabel('Features')
plt.title('Correlation Heat Map')
plt.show()

print(df2.corr()['Departure Hour'].sort_values(ascending=False))

print(df2.corr()['Departure Minute'].sort_values(ascending=False))

print(df2.corr()['Flight Hour'].sort_values(ascending=False))

print(df2.corr()['Flight Minute'].sort_values(ascending=False))

"""# Modelling"""

# Save the train and test sets
train_val, test = train_test_split(df2, test_size=0.2, random_state=4)

# Splitting train/validation set into training and validation sets
train, validation = train_test_split(train_val, test_size=0.2, random_state=4)

# Checking the shapes of each set
print("Training set shape:", train.shape)
print("Validation set shape:", validation.shape)
print("Test set shape:", test.shape)

print(test.columns)

feature_cols = ['Departure Hour',	'Flight Hour']
X_train = train[test.columns]
X_validation = validation[test.columns]
X_test = test[test.columns]

y_train = train['Departure Time']
y_validation = validation['Departure Time']
y_test = test['Departure Time']

y_train = train['Departure Time']
y_test = test['Departure Time']

print("X_train data type:", X_train.dtypes)
print("y_train data type:", y_train.dtypes)
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("y_validation shape:", y_validation.shape)
print("X_validation shape:", X_validation.shape)

print("Missing values in X_train:", X_train.isnull().sum())
print("Missing values in y_train:", y_train.isnull().sum())
print("Missing values in X_test:", X_test.isnull().sum())
print("Missing values in y_test:", y_test.isnull().sum())
print("Missing values in validation:", validation.isnull().sum())

"""# Modelling"""

